// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: define.proto

#if WITH_GOOGLE_PROTOBUF_BINDING == 1
#include "AllowWindowsPlatformTypes.h"
#endif // WITH_GOOGLE_PROTOBUF_BINDING

#if _MSC_VER >= 1300
#ifndef _PS3
#pragma warning(push)
#pragma warning(disable : 4530)	// warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax)
#pragma warning(disable : 4512)	// warning C4512: assignment operator could not be generated
#pragma warning(disable : 4244)	// warning C4244:  warning C4244: '=' : conversion from '__w64 int' to 'int', possible loss of data
#pragma warning(disable : 4267)	// warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data
#pragma warning(disable : 4125)	// warning C4125: decimal digit terminates octal escape sequence
#pragma warning(disable : 4127)	// warning C4127: conditional expression is constant
#pragma warning(disable : 4100)	// warning C4100: 'op' : unreferenced formal parameter
#endif // _PS3
#endif // _MSC_VER
#if _GNUC
#ifndef _PS3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#endif // _PS3
#endif // _GNUC

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "define.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace packets {

namespace {

const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SystemCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_define_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_define_2eproto() {
  protobuf_AddDesc_define_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "define.proto");
  GOOGLE_CHECK(file != NULL);
  Header_descriptor_ = file->message_type(0);
  static const int Header_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, systemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, packetcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, seq_),
  };
  Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      -1,
      -1,
      -1,
      sizeof(Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _is_default_instance_));
  SystemCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_define_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Header_descriptor_, &Header::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_define_2eproto() {
  delete Header::default_instance_;
  delete Header_reflection_;
}

void protobuf_AddDesc_define_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_define_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014define.proto\022\007packets\"K\n\006Header\022\014\n\004siz"
    "e\030\001 \001(\007\022\022\n\nsystemCode\030\002 \001(\007\022\022\n\npacketCod"
    "e\030\003 \001(\007\022\013\n\003seq\030\004 \001(\007*\027\n\nSystemCode\022\t\n\005WO"
    "RLD\020\000b\006proto3", 133);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "define.proto", &protobuf_RegisterTypes);
  Header::default_instance_ = new Header();
  Header::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_define_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_define_2eproto {
  StaticDescriptorInitializer_define_2eproto() {
    protobuf_AddDesc_define_2eproto();
  }
} static_descriptor_initializer_define_2eproto_;
const ::google::protobuf::EnumDescriptor* SystemCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemCode_descriptor_;
}
bool SystemCode_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kSizeFieldNumber;
const int Header::kSystemCodeFieldNumber;
const int Header::kPacketCodeFieldNumber;
const int Header::kSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packets.Header)
}

void Header::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Header::Header(const Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:packets.Header)
}

void Header::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  size_ = 0u;
  systemcode_ = 0u;
  packetcode_ = 0u;
  seq_ = 0u;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:packets.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_define_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:packets.Header)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Header, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Header*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(size_, seq_);

#undef ZR_HELPER_
#undef ZR_

}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:packets.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 size = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_systemCode;
        break;
      }

      // optional fixed32 systemCode = 2;
      case 2: {
        if (tag == 21) {
         parse_systemCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &systemcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_packetCode;
        break;
      }

      // optional fixed32 packetCode = 3;
      case 3: {
        if (tag == 29) {
         parse_packetCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &packetcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_seq;
        break;
      }

      // optional fixed32 seq = 4;
      case 4: {
        if (tag == 37) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:packets.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:packets.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:packets.Header)
  // optional fixed32 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->size(), output);
  }

  // optional fixed32 systemCode = 2;
  if (this->systemcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->systemcode(), output);
  }

  // optional fixed32 packetCode = 3;
  if (this->packetcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->packetcode(), output);
  }

  // optional fixed32 seq = 4;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->seq(), output);
  }

  // @@protoc_insertion_point(serialize_end:packets.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:packets.Header)
  // optional fixed32 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->size(), target);
  }

  // optional fixed32 systemCode = 2;
  if (this->systemcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->systemcode(), target);
  }

  // optional fixed32 packetCode = 3;
  if (this->packetcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->packetcode(), target);
  }

  // optional fixed32 seq = 4;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->seq(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:packets.Header)
  return target;
}

int Header::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:packets.Header)
  int total_size = 0;

  // optional fixed32 size = 1;
  if (this->size() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 systemCode = 2;
  if (this->systemcode() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 packetCode = 3;
  if (this->packetcode() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 seq = 4;
  if (this->seq() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packets.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packets.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packets.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packets.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.systemcode() != 0) {
    set_systemcode(from.systemcode());
  }
  if (from.packetcode() != 0) {
    set_packetcode(from.packetcode());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packets.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packets.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {

  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  std::swap(size_, other->size_);
  std::swap(systemcode_, other->systemcode_);
  std::swap(packetcode_, other->packetcode_);
  std::swap(seq_, other->seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// optional fixed32 size = 1;
void Header::clear_size() {
  size_ = 0u;
}
 ::google::protobuf::uint32 Header::size() const {
  // @@protoc_insertion_point(field_get:packets.Header.size)
  return size_;
}
 void Header::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:packets.Header.size)
}

// optional fixed32 systemCode = 2;
void Header::clear_systemcode() {
  systemcode_ = 0u;
}
 ::google::protobuf::uint32 Header::systemcode() const {
  // @@protoc_insertion_point(field_get:packets.Header.systemCode)
  return systemcode_;
}
 void Header::set_systemcode(::google::protobuf::uint32 value) {
  
  systemcode_ = value;
  // @@protoc_insertion_point(field_set:packets.Header.systemCode)
}

// optional fixed32 packetCode = 3;
void Header::clear_packetcode() {
  packetcode_ = 0u;
}
 ::google::protobuf::uint32 Header::packetcode() const {
  // @@protoc_insertion_point(field_get:packets.Header.packetCode)
  return packetcode_;
}
 void Header::set_packetcode(::google::protobuf::uint32 value) {
  
  packetcode_ = value;
  // @@protoc_insertion_point(field_set:packets.Header.packetCode)
}

// optional fixed32 seq = 4;
void Header::clear_seq() {
  seq_ = 0u;
}
 ::google::protobuf::uint32 Header::seq() const {
  // @@protoc_insertion_point(field_get:packets.Header.seq)
  return seq_;
}
 void Header::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:packets.Header.seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace packets

// @@protoc_insertion_point(global_scope)
