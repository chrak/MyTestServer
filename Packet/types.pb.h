// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef PROTOBUF_types_2eproto__INCLUDED
#define PROTOBUF_types_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace packets {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_types_2eproto();
void protobuf_AssignDesc_types_2eproto();
void protobuf_ShutdownFile_types_2eproto();

class Vector3;

enum PacketStateCode {
  ACTIONSTATE = 0,
  PacketStateCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PacketStateCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PacketStateCode_IsValid(int value);
const PacketStateCode PacketStateCode_MIN = ACTIONSTATE;
const PacketStateCode PacketStateCode_MAX = ACTIONSTATE;
const int PacketStateCode_ARRAYSIZE = PacketStateCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketStateCode_descriptor();
inline const ::std::string& PacketStateCode_Name(PacketStateCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketStateCode_descriptor(), value);
}
inline bool PacketStateCode_Parse(
    const ::std::string& name, PacketStateCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketStateCode>(
    PacketStateCode_descriptor(), name, value);
}
enum ActionPacketCode {
  ACTION = 0,
  ActionPacketCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ActionPacketCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ActionPacketCode_IsValid(int value);
const ActionPacketCode ActionPacketCode_MIN = ACTION;
const ActionPacketCode ActionPacketCode_MAX = ACTION;
const int ActionPacketCode_ARRAYSIZE = ActionPacketCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionPacketCode_descriptor();
inline const ::std::string& ActionPacketCode_Name(ActionPacketCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionPacketCode_descriptor(), value);
}
inline bool ActionPacketCode_Parse(
    const ::std::string& name, ActionPacketCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionPacketCode>(
    ActionPacketCode_descriptor(), name, value);
}
enum PacketCode {
  ENTERWORLD = 0,
  ENTERPACKET = 1,
  MOVE = 2,
  LEAVEWORLD = 3,
  LEAVEPACKET = 4,
  LOGINREQ = 5,
  LOGINACK = 6,
  CHARSELECTREQ = 7,
  CHARSELECTACK = 8,
  PINGREQ = 9,
  UPDATEDISPATCHREQ = 10,
  VSDISCONNECTREQ = 11,
  VSDISCONNECTNOTIFY = 12,
  PacketCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PacketCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PacketCode_IsValid(int value);
const PacketCode PacketCode_MIN = ENTERWORLD;
const PacketCode PacketCode_MAX = VSDISCONNECTNOTIFY;
const int PacketCode_ARRAYSIZE = PacketCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketCode_descriptor();
inline const ::std::string& PacketCode_Name(PacketCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketCode_descriptor(), value);
}
inline bool PacketCode_Parse(
    const ::std::string& name, PacketCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketCode>(
    PacketCode_descriptor(), name, value);
}
enum ActorType {
  PC = 0,
  NPC = 1,
  ActorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ActorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ActorType_IsValid(int value);
const ActorType ActorType_MIN = PC;
const ActorType ActorType_MAX = NPC;
const int ActorType_ARRAYSIZE = ActorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActorType_descriptor();
inline const ::std::string& ActorType_Name(ActorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActorType_descriptor(), value);
}
inline bool ActorType_Parse(
    const ::std::string& name, ActorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActorType>(
    ActorType_descriptor(), name, value);
}
enum ActionType {
  STAND = 0,
  WALK = 1,
  RUN = 2,
  ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ActionType_IsValid(int value);
const ActionType ActionType_MIN = STAND;
const ActionType ActionType_MAX = RUN;
const int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionType_descriptor();
inline const ::std::string& ActionType_Name(ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionType_descriptor(), value);
}
inline bool ActionType_Parse(
    const ::std::string& name, ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
enum ResultType {
  RESULT_SUCCESS = 0,
  RESULT_FAILED = 1,
  ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResultType_IsValid(int value);
const ResultType ResultType_MIN = RESULT_SUCCESS;
const ResultType ResultType_MAX = RESULT_FAILED;
const int ResultType_ARRAYSIZE = ResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultType_descriptor();
inline const ::std::string& ResultType_Name(ResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultType_descriptor(), value);
}
inline bool ResultType_Parse(
    const ::std::string& name, ResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultType>(
    ResultType_descriptor(), name, value);
}
// ===================================================================

class Vector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:packets.Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  void Swap(Vector3* other);

  // implements Message ----------------------------------------------

  inline Vector3* New() const { return New(NULL); }

  Vector3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float Z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:packets.Vector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_types_2eproto();
  friend void protobuf_AssignDesc_types_2eproto();
  friend void protobuf_ShutdownFile_types_2eproto();

  void InitAsDefaultInstance();
  static Vector3* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// optional float X = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:packets.Vector3.X)
  return x_;
}
inline void Vector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:packets.Vector3.X)
}

// optional float Y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:packets.Vector3.Y)
  return y_;
}
inline void Vector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:packets.Vector3.Y)
}

// optional float Z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:packets.Vector3.Z)
  return z_;
}
inline void Vector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:packets.Vector3.Z)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace packets

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::packets::PacketStateCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::packets::PacketStateCode>() {
  return ::packets::PacketStateCode_descriptor();
}
template <> struct is_proto_enum< ::packets::ActionPacketCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::packets::ActionPacketCode>() {
  return ::packets::ActionPacketCode_descriptor();
}
template <> struct is_proto_enum< ::packets::PacketCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::packets::PacketCode>() {
  return ::packets::PacketCode_descriptor();
}
template <> struct is_proto_enum< ::packets::ActorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::packets::ActorType>() {
  return ::packets::ActorType_descriptor();
}
template <> struct is_proto_enum< ::packets::ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::packets::ActionType>() {
  return ::packets::ActionType_descriptor();
}
template <> struct is_proto_enum< ::packets::ResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::packets::ResultType>() {
  return ::packets::ResultType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_types_2eproto__INCLUDED
